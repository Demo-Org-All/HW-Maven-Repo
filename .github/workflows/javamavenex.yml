# This is a basic workflow to help you get started with Github Actions

name: Java Maven Example

on: [push]

jobs:
  release-project:
    name: Release the project 
    runs-on: self-hosted
    needs: build-project
    steps:
      - name: Download the artifacts 
        uses: actions/download-artifact@v2.0.10
        with:
           name: assets-for-download
           # Destination path
           path: d:\temp\rel
      - name: Archive the WAR file (Create ZIP  file for Release)
        uses: vimtor/action-zip@v1
        with:
           files: target/HelloWorld-Maven.war
           dest: Hw-Maven-Repo.zip
      - name: Create Github Release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release V${{ github.run_number }}
      - name: Upload asset to Github Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ github.workspace }}/Hw-Maven-Repo.zip
          asset_name: Hw-Maven-Repo-v${{ github.run_number }}.zip
          asset_content_type: application/zip
  build-project:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v2
      
      - name: Step 1 - Un-Install the Application
        run: del D:\apache-tomcat-7.0.65\apache-tomcat-7.0.65\webapps\HelloWorld-Maven.war
        
      - name: Step 2 - Build with Maven
        run: mvn clean install
      
      - uses: jfrog/setup-jfrog-cli@v1
      - run: jfrog --version
           
      - name: Step 3 - Use the Upload Artifacts with GitHub Action
        uses: actions/upload-artifact@v2.2.4
        with:
           name: assets-for-download
           path: target/*.war
          
      - name: Step 4 - Upload to JFrog Artifactory
        # curl -u admin:anshuanik0310N$ -X PUT http://l-0310:8082/artifactory/Actions-Maven/HelloWorld-Maven-v${{ github.run_number }}.war -T target/HelloWorld-Maven.war
        shell: bash
        run:   |
            curl -u admin:AKCp8jQnSn8rcSgKvpPDNXixkVgnHr8DC436hrmcWEq3WSghyyBeYFUt3HBfQQqN3XmxxEiu3 -X PUT http://l-0310:8082/artifactory/Actions-Maven/HelloWorld-Maven-v${{ github.run_number }}.war -T target/HelloWorld-Maven.war 
            pwd
            dir
      
      - name: Step 5 - Download the latest from JFrog Artifactory
        shell: bash
        run:   |
            curl -u admin:AKCp8jQnSn8rcSgKvpPDNXixkVgnHr8DC436hrmcWEq3WSghyyBeYFUt3HBfQQqN3XmxxEiu3 -O http://l-0310:8082/artifactory/Actions-Maven/HelloWorld-Maven-v${{ github.run_number }}.war
        
      - name: Step 6 - Deploy to Tomcat
        #run: copy D:\actions-runner\_work\HW-Maven-Repo\HW-Maven-Repo\target\HelloWorld-Maven.war D:\apache-tomcat-7.0.65\apache-tomcat-7.0.65\webapps
        run: copy HelloWorld-Maven-v${{ github.run_number }}.war D:\apache-tomcat-7.0.65\apache-tomcat-7.0.65\webapps\HelloWorld-Maven.war

